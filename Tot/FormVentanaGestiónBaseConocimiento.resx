<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        AD/AAAA/wAAAP8AAAD/AAAB/wAA//8AP//8=
</value>
  </data>
</root>